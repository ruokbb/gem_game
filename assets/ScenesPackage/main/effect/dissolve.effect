CCEffect %{
  techniques:
    - name: opaque
      passes:
        - vert: vs:vert
          frag: fs:frag
          properties: &props
            mainTexture: { value: white }
            noiseTexture: {value: white}
            threshold: {value: 0.1, editor: {tooltip: "消失阈值", type: number, range: [0.0, 1, 0.1]}}
            melt: {value: 0.15, editor: {tooltip: "融化阈值", type: number, range: [0.0, 1, 0.1]}}
}%

CCProgram vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  vec4 vert() {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos
    #else
    pos = cc_matViewProj * pos
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0
    #endif
    v_color = a_color
    return pos;
  }
}%

CCProgram fs %{
  
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D mainTexture;
  #endif

  uniform Prop {
    number threshold;
    number melt;
  };

  vec4 getTextureColor(sampler2D texture, vec2 v_uv0) {
    if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    }
    return texture(texture, v_uv0);
  }

  // 获取周边像素rgb平均值
  vec4 getBgColor() {
    vec4 color_up = getTextureColor(texture, v_uv0 + vec2(0, outlineWidth)); 
    vec4 color_down = getTextureColor(texture, v_uv0 - vec2(0, outlineWidth)); 
    vec4 color_left = getTextureColor(texture, v_uv0 - vec2(outlineWidth, 0)); 
    vec4 color_right = getTextureColor(texture, v_uv0 + vec2(outlineWidth, 0)); 
    vec4 color_up_left = getTextureColor(texture, v_uv0 + vec2(outlineWidth, -outlineWidth)); 
    vec4 color_up_right = getTextureColor(texture, v_uv0 + vec2(outlineWidth, outlineWidth)); 
    vec4 color_down_left = getTextureColor(texture, v_uv0 + vec2(-outlineWidth, -outlineWidth)); 
    vec4 color_down_right = getTextureColor(texture, v_uv0 + vec2(-outlineWidth, outlineWidth)); 
    vec4 final_color = (color_up + color_down + color_left + color_right + color_up_left + color_up_right + 
                        color_down_left + color_down_right) / 8.0
    return final_color;
  }

  vec4 frag() {
    vec o = vec4(1,1,1,1);
    #if USE_TEXTURE
    o *= texture(mainTexture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    vec4 noiseColor = texture(noiseTexture, v_uv0)
    if (noiseColor.r < threshold){
      discard;
    } 

    if (noiseColor.r < threshold + melt){
      // 获取周围平均值
      vec4 meltColor = getBgColor();
      // number percent = saturate((threshold - noiseColor.r) / melt)
      number percent = clamp((threshold - noiseColor.r) / melt, 0.0, 1.0)
      vec4 finalColor = mix(meltColor, o, percent)
      return finalColor
    }

    return o
  }
}%