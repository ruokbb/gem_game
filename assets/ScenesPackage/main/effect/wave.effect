// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # 自定义参数
        dt: {value: 0.02, editor: {tooltip: "变化幅度",range: [0.0,1,0.01]}}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;


  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    pos = cc_matViewProj * pos;

    v_uv0 = a_texCoord;

    v_color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <alpha-test>

  in vec4 v_color;
  in vec2 v_uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  uniform Wave{
    float dt;
  };

  vec4 frag () {

    vec4 o = vec4(1, 1, 1, 1);
    ALPHA_TEST(o);

    #if USE_WAVE
    vec2 offect = vec2(0,0);
    offect.x = sin(v_uv0.x * 14.0) * dt;
    offect.y = sin(v_uv0.y * 14.0) * dt;
    vec2 final_uv = v_uv0 + offect;
    o *= texture(cc_spriteTexture, final_uv);
    o *= v_color;
    return o;
    #endif

    o *= texture(cc_spriteTexture, v_uv0);
    o *= v_color;

    return o;
  }
}%
